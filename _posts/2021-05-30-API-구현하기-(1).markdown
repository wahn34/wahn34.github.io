---
title:  REST API 구현하기
author: wahn
date:   2021-06-06 18:31:17 +0900
categories: [PROJECT]
tags: [private project]
pin: true
---

#### REST API 구현하기
Spring Framework 기반에서 REST API를 구현해본 적이 있다.   
처음에는 이게 되나 싶은 생각에 Controller에 구현되어있는 ajax에 Swift Alamofire 를 사용해 호출해보았었는데 잘 되었다.  
그래서 ajax의 로직을 그대로 따라가며 GET, POST, PUT, DELETE METHOD만 추가하여 따로 API URI를 만들었고, 결과적으로 모바일 앱, 웹에서 사용할 수 있는 하나의 서비스가 구현되었다.  


이번에는 Spring Boot 기반으로 REST API를 해보려 한다.    
일정을 등록할 수 있는 FRK_SCHEDULE TABLE을 생성했다.  

```sql
CREATE TABLE IF NOT EXISTS FRK_SCHEDULE (
       SCHDUL_SEQ			INT					NOT NULL AUTO_INCREMENT PRIMARY KEY,
       SCHDUL_UPPER_CD		VARCHAR(5)			,
       SCHDUL_NM			VARCHAR(20)			NOT NULL,
       USE_YN				VARCHAR(1)			NOT NULL DEFAULT('Y'),
       SHOW_YN				VARCHAR(1)			NOT NULL DEFAULT('Y')
);
```
다른 테이블도 생성하여 JOIN하여 다른 사람들과 공유 등의 기능을 구현해나갈 예정이지만, 우선 SPRING JPA, REST API를 경험해보기 위해 하나의 테이블만 먼저 생성했다.  

테이블명과 동일한 java class를 생성해준다.  
* @Table(name = "") 테이블을 지정해줄 수 있기 때문에 무리할 필요는 없다.    
```java
FrkSchedule.java

@Getter
@Setter
@Entity
@Table(name = "FRK_SCHEDULE")
public class FrkSchedule {
	@Id @GeneratedValue
	
	private Long schdulSeq;
	private String schdulUpperCd;
	private String schdulNm;
	private String useYn = "Y";
	private String showYn = "Y";
	
	public FrkSchedule() {
		
	}

	public FrkSchedule(String schdulNm) {
		this.schdulNm = schdulNm;
	}
	
	public FrkSchedule(String schdulNm, String schdulUpperCd) {
		this.schdulNm = schdulNm;
		this.schdulUpperCd = schdulUpperCd;
	}

	public Long getSchdulSeq() {
		return schdulSeq;
	}

	public void setSchdulSeq(Long schdulSeq) {
		this.schdulSeq = schdulSeq;
	}

	public String getSchdulUpperCd() {
		return schdulUpperCd;
	}

	public void setSchdulUpperCd(String schdulUpperCd) {
		this.schdulUpperCd = schdulUpperCd;
	}

	public String getSchdulNm() {
		return schdulNm;
	}

	public void setSchdulNm(String schdulNm) {
		this.schdulNm = schdulNm;
	}

	public String getUseYn() {
		return useYn;
	}

	public void setUseYn(String useYn) {
		this.useYn = useYn;
	}

	public String getShowYn() {
		return showYn;
	}

	public void setShowYn(String showYn) {
		this.showYn = showYn;
	}
}
```

``` java
FrkScheduleRepository.java
public interface FrkScheduleRepository extends CrudRepository<FrkSchedule, Long>{
	
}
  ```

```java
FrkScheduleController.java
@RestController
@RequestMapping(value="/schedule")
public class FrkScheduleController {
	private FrkScheduleRepository frkScheduleRepository;
	
	@Autowired
	public FrkScheduleController(FrkScheduleRepository frkScheduleRepository) {
		this.frkScheduleRepository = frkScheduleRepository;
	}
	
	@PostMapping
	public FrkSchedule saveSchedule(@RequestParam String schdulNm) {
		return frkScheduleRepository.save(new FrkSchedule(schdulNm));
	}
	@GetMapping
	public Iterable<FrkSchedule> showListAll() {
		return frkScheduleRepository.findAll();
	}
}
```
   
CrudRepository의 메서드 및 기능  

|메서드|기능|
|---|---|
|findAll()|전체 조회|
|findOne()|조회|
|delete()|삭제|
|deleteAll()|모두 삭제|
|save()|저장|
|exists()|확인|
|count()|개수|

  
GET : ip:포트/schedule에 들어가보면 FRK_SCHEDULE 테이블에 담겨져 있는 정보가 출력 된다.
POST: IP:PORT/schedule?schdulNm=TEST1 을 하면 TEST1이라는 일정이 등록되고, 마찬가지로 GET을 통해 저장된 결과를 조회해볼 수 있었다.


JPA가 익숙하지 않아서 아직까지는 SpringFramework에서 사용하던 MyBatis로 구현하는 방식이 조금 더 편한 것 같다.  
다만, 쿼리를 작성하지 않아도 저장, 수정, 삭제가 이루어진다는 점은 되게 편했다.  